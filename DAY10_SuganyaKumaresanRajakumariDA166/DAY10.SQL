--1.	WriteÂ  a function to Calculate the total stock value for a given category

SELECT * FROM categories
SELECT * FROM products
CREATE OR REPLACE FUNCTION total_stockvalue(p_category_id INT)
RETURNS DECIMAL(10,2)
LANGUAGE plpgsql
AS $$
DECLARE
 v_stockvalue DECIMAL(10,2);
BEGIN
 IF NOT EXISTS (SELECT 1 FROM products WHERE category_id = p_category_id) THEN
 	RAISE EXCEPTION 'Category id % does not exist',p_category_id;
	RETURN 0;
 END IF;
 SELECT 
 COALESCE(ROUND(SUM(unit_price * units_in_stock)::DECIMAL,2),0)
 INTO v_stockvalue
 FROM products p
 WHERE p.category_id = p_category_id;

 RETURN v_stockvalue;
END;
$$;

SELECT total_stockvalue(1);


--2.	Try writing a cursor query which I executed in the training.
CREATE OR REPLACE PROCEDURE update_prices_with_cursor()
LANGUAGE plpgsql
AS $$
DECLARE
 product_cursor CURSOR FOR
 SELECT product_id,product_name,unit_price,units_in_stock
 FROM products
 WHERE discontinued = 0;

 product_record RECORD;
 v_new_price DECIMAL(10,2);

BEGIN
	OPEN product_cursor;
	LOOP
	FETCH product_cursor INTO product_record;
	EXIT WHEN NOT FOUND;

	IF product_record.units_in_stock < 10 THEN
		v_new_price := product_record.unit_price * 1.1;
	ELSE
		v_new_price := product_record.unit_price * 0.95;
	END IF;

	UPDATE products
	SET unit_price = ROUND(v_new_price,2)
	WHERE product_id = product_record.product_id;

	RAISE NOTICE 'Updated % price from % to %',product_record.product_name,
	product_record.unit_price,v_new_price;
	END LOOP;

	CLOSE product_cursor;
END;
$$;

CALL update_prices_with_cursor();
