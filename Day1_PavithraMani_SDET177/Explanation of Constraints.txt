1. orders Table
Constraints:
PRIMARY KEY (orderid) – Ensures that each order has a unique identifier.
FOREIGN KEY (customerid) – Links the order to a customer in the customers table.
FOREIGN KEY (employeeid) – Links to the employee handling the order in the employees table.
FOREIGN KEY (shipperid) – Links to the shipper handling delivery in the shippers table.
orderid INTEGER NOT NULL - Each order must have a unique ID to identify it.

In this table Constraints are used to avoid duplicate orders (orderid)
To ensure valid references to customers, employees, and shippers (data consistency).

2. customers Table
Constraints:
PRIMARY KEY (customer_id) – Ensures every customer is uniquely identified.
customer_id VARCHAR(10) NOT NULL - Each customer must have an ID to be identified in the system.

In this table it is used to avoid duplicate customers and enable reliable linking from orders.

3. employees Table
Constraints:
PRIMARY KEY (employeeid) – Uniquely identifies each employee.
employeeid SERIAL NOT NULL - Each employee must have a unique ID to track them.

In this table it is needed for referencing from the orders table via a foreign key.

4. shippers Table
Constraints:
PRIMARY KEY (shipperid) – Ensures unique identification of each shipper.
shipperid INTEGER NOT NULL - Each shipping company must have a unique ID for identification.

It is for referencing in the orders table when identifying which shipper was used.

5. order_details Table
Constraints:
PRIMARY KEY (orderid, productid) – Composite key to ensure uniqueness for each product in each order.
FOREIGN KEY (orderid) – Links back to the orders table.
FOREIGN KEY (productid) – Links to the products table.
orderid INTEGER NOT NULL
                          -->Each row must be linked to a specific order and product.
                          --> Both are required to define the line item.
productid INTEGER NOT NULL
                              

It is to avoid duplicate product entries in a single order.
It is to ensure products and orders exist in their respective tables.

6. products Table
Constraints:
PRIMARY KEY (productid) – Uniquely identifies each product.
FOREIGN KEY (categoryid) – Links to categories table to specify the type of product.
productid INTEGER NOT NULL - Each product must have a unique ID to identify it.
To maintain product uniqueness.
To group products logically via categories.

7. categories Table
Constraints:
PRIMARY KEY (category_id) – Each category must be uniquely identifiable.
category_id SERIAL NOT NULL - Each product category needs a unique ID.
It is for linking from the products table to group or filter products by category.



A composite key is a primary key made up of two or more columns that together uniquely identify a row in a table.
It's used when a single column isn't enough to ensure uniqueness.

Composite Key: order_details Table

CONSTRAINT order_details_pkey PRIMARY KEY (orderid, productid)  
---This line defines a composite primary key using


orderid (from the orders table)
productid (from the products table)

Usage of composite key
One order can contain multiple products.
One product can be part of many orders.
But each product in a particular order should appear only once.
So, the combination of orderid and productid uniquely identifies a row in order_details.

